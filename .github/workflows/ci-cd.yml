name: CI/CD to Local Kind Cluster

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      # Use --load to directly load into Docker daemon for Kind to pick up
      run: docker build -t pytorch-orchestrator:latest .

    - name: Create Kind cluster
      uses: kubernetes-sigs/kind-action@v1.9.0
      with:
        # Specify a Kubernetes version for Kind. Choose one compatible with your needs.
        # See https://kind.sigs.k8s.io/docs/user/quick-start/#creating-a-cluster
        node_image: kindest/node:v1.28.0

    - name: Load Docker image into Kind cluster
      run: kind load docker-image pytorch-orchestrator:latest

    - name: Deploy Kubernetes manifests
      run: |
        kubectl apply -f kubernetes/master-service.yaml
        kubectl apply -f kubernetes/master-statefulset.yaml
        kubectl apply -f kubernetes/worker-statefulset.yaml

    - name: Wait for master pod to be ready
      run: kubectl wait --for=condition=ready pod -l app=pytorch-distributed,role=master --timeout=5m

    - name: Wait for worker pods to be ready
      run: kubectl wait --for=condition=ready pod -l app=pytorch-distributed,role=worker --timeout=5m

    - name: Verify training logs (master)
      # This step checks if the master pod starts training.
      # You might need to adjust the grep pattern based on actual logs.
      # For CI, consider modifying worker.py to run for a very short duration
      # (e.g., 100 steps) and then exit cleanly, to avoid long CI job times.
      run: |
        MASTER_POD=$(kubectl get pod -l app=pytorch-distributed,role=master -o jsonpath='{.items[0].metadata.name}')
        echo "Checking logs for master pod: $MASTER_POD"
        # Look for a log indicating training started or finished
        kubectl logs $MASTER_POD | grep -E "Starting Logical Epoch|Training finished" || \
        (echo "Master pod logs do not show expected training output." && exit 1)