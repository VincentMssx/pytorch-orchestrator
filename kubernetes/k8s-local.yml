# --- 1. Headless Service for Stable Network Identity ---
# This part is the same. It provides DNS names like 'torch-worker-0.torch-worker-svc'
apiVersion: v1
kind: Service
metadata:
  name: torch-worker-svc
spec:
  clusterIP: None
  selector:
    app: torch-worker

---
# --- 2. The StatefulSet to run our torchrun workers ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: torch-worker
spec:
  serviceName: "torch-worker-svc"
  # Let's run 2 workers locally to save resources
  replicas: 2
  selector:
    matchLabels:
      app: torch-worker
  template:
    metadata:
      labels:
        app: torch-worker
    spec:
      containers:
      - name: worker
        # Use the local image name. No registry prefix needed.
        image: elastic-torch-worker:latest
        # 'Never' tells Kubernetes not to try pulling from a remote registry.
        imagePullPolicy: Never
        command: ["torchrun"]
        args: [
          "--nproc_per_node=1",
          # The total number of nodes is the replica count.
          "--nnodes=2",
          "--rdzv_backend=c10d",
          "--rdzv_endpoint=torch-worker-0.torch-worker-svc:29400",
          "worker.py"
        ]
        volumeMounts:
        - name: checkpoints-storage
          mountPath: /app/checkpoints
      volumes:
      - name: checkpoints-storage
        # hostPath mounts a directory from your local machine (the 'node').
        # Ensure this directory exists on your machine!
        hostPath:
          # In Windows: C:\Users\YourUser\k8s-checkpoints
          # In macOS/Linux: /Users/YourUser/k8s-checkpoints
          path: C:\Users\Vincent\Documents\k8s-checkpoints
          type: DirectoryOrCreate